import random

PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def is_winner(board, player):
    for row in range(3):
        if all(board[row][col] == player for col in range(3)): return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)): return True
    if all(board[i][i] == player for i in range(3)): return True
    if all(board[i][2-i] == player for i in range(3)): return True
    return False

def is_board_full(board):
    return all(cell != EMPTY for row in board for cell in row)

def minimax(board, depth, is_maximizing, alpha, beta):
    if is_winner(board, PLAYER_X): return 10 - depth
    if is_winner(board, PLAYER_O): return depth - 10
    if is_board_full(board): return 0
    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha: break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha: break
        return min_eval

def best_move(board):
    best_value = float('-inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                move_value = minimax(board, 0, False, float('-inf'), float('inf'))
                board[i][j] = EMPTY
                if move_value > best_value:
                    best_value = move_value
                    move = (i, j)
    return move

def player_move(board):
    while True:
        try:
            row, col = map(int, input("Enter move (row col): ").split())
            if board[row][col] == EMPTY: return row, col
        except (ValueError, IndexError): pass

def play_game():
    board = [[EMPTY] * 3 for _ in range(3)]
    print_board(board)
    while True:
        row, col = player_move(board)
        board[row][col] = PLAYER_O
        print_board(board)
        if is_winner(board, PLAYER_O): print("Player O wins!"); break
        if is_board_full(board): print("It's a tie!"); break
        print("AI is making its move...")
        ai_row, ai_col = best_move(board)
        board[ai_row][ai_col] = PLAYER_X
        print_board(board)
        if is_winner(board, PLAYER_X): print("AI wins!"); break
        if is_board_full(board): print("It's a tie!"); break

if __name__ == "__main__":
    play_game()